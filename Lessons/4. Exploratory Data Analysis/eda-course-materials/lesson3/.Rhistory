head(pf.fc_by_age_gender.wide)
ggplot(aes(x = age, y = male/female), data = pf.fc_by_age_gender.wide) +
geom_line() +
geom_hline(yintercept = 1, linetype = 'dashed', color = 'blue')
pf$year_joined <- floor(2014 - pf$tenure/365)
summary(pf$year_joined)
table(pf$year_joined)
pf$year_joined.bucket <- cut(pf$year_joined, breaks = c(2004, 2009, 2011, 2012, 2014))
table(pf$year_joined.bucket, useNA = 'ifany')
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(gender))) +
geom_line(aes(color = gender), stat = 'summary', fun.y = median)
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(gender))) +
geom_line(aes(color = gender), stat = 'summary', fun.y = median)
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = median)
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean) +
geom_line(stat = "summary", fun.y = mean, linetype = 2)
with(subset(pf, tenure >= 1), summary(friend_count/tenure))
ggplot(aes(x = tenure, y = friendships_initiated/tenure), data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket))
library(gridExtra)
p1 <- ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
p2 <- ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
p3 <- ggplot(aes(x = 30 * round(tenure / 30), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
p4 <- ggplot(aes(x = 90 * round(tenure / 90), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
grid.arrange(p1, p2, p3, p4, nrow = 4)
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_smooth(aes(color = year_joined.bucket))
yo <- read.csv("yogurt.csv")
str(yo)
# change the id from an int to a factor
yo$id <- factor(yo$id)
str(yo)
ggplot(aes(x = price), data = yo) +
geom_histogram()
# very biased model
ggplot(aes(x = price), data = yo) +
geom_histogram(binwidth = 10)
summary(yo)
length(unique(yo$price))
table(yo$price)
yo <- transform(yo, all.purchases = strawberry + blueberry + pina.colada + plain + mixed.berry)
#yo$all.purchases <- yo$strawberry + yo$blueberry + yo$pina.colada + yo$plain + yo$mixed.berry
ggplot(aes(x = time, y = price), data = yo) +
geom_jitter(alpha = 1/4, shape = 21, fill = I('#F79420'))
set.seed(4230)
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x = time, y = price),
data = subset(yo, id %in% sample.ids)) +
facet_wrap( ~ id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
set.seed(10)
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x = time, y = price),
data = subset(yo, id %in% sample.ids)) +
facet_wrap( ~ id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
set.seed(1836)
pf_subset <- pf[, c(2:15)]
names(pf_subset)
nci <- read.table("nci.tsv")
?nci
colnames(nci) <- c(1:64)
summary(nci)
?pf
colnames(nci) <- c(1:64)
nci <- read.table("nci.tsv")
colnames(nci) <- c(1:64)
names(nci.long.samp) <- c("gene", "case", "value")
nci.long.samp <- melt(as.matrix(nci[1:200,]))
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
?melt
library(GGally)
?melt
nci.long.samp <- melt(as.matrix(nci[1:200,]))
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
?melt
nci.long.samp <- melt(as.matrix(nci[1:200,]))
library(GGally)
theme_set(theme_minimal(20))
library(dplyr)
>melt
?melt
nci.long.samp <- melt(as.matrix(nci[1:200,]))
getwd()
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
#setwd('/media/pure/SharedData/Development/Personal_Dev/DataAnalyst/Lessons/4. Exploratory Data Analysis/eda-course-materials/lesson3/')
list.files()
library(ggplot2)
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
### You can also read in the data using the following code:
#pf < - read.delim('pseudo_facebook.tsv')
library(ggplot2)
suppressMessages(library(dplyr))
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_boxplot() +
stat_summary(fun.y = mean, geom = 'point', shape = 4)
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(gender))) +
geom_line(aes(color = gender), stat = 'summary', fun.y = median)
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n()) %>%
ungroup() %>%
arrange(age)
ggplot(aes(x = age, y = median_friend_count),
data = pf.fc_by_age_gender) +
geom_line(aes(color = gender))
#install.packages("tidyr")
library(tidyr)
spread(subset(pf.fc_by_age_gender,
select = c('gender', 'age', 'median_friend_count')),
gender, median_friend_count)
#install.packages('reshape2')
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = 'median_friend_count')
head(pf.fc_by_age_gender.wide)
pf.fc_by_age_gender.wide <-
subset(pf.fc_by_age_gender[c('age', 'gender', 'median_friend_count')],
!is.na(gender)) %>%
spread(gender, median_friend_count) %>%
mutate(ratio = male / female)
head(pf.fc_by_age_gender.wide)
ggplot(aes(x = age, y = male/female), data = pf.fc_by_age_gender.wide) +
geom_line() +
geom_hline(yintercept = 1, linetype = 'dashed', color = 'blue')
pf$year_joined <- floor(2014 - pf$tenure/365)
summary(pf$year_joined)
table(pf$year_joined)
pf$year_joined.bucket <- cut(pf$year_joined, breaks = c(2004, 2009, 2011, 2012, 2014))
table(pf$year_joined.bucket, useNA = 'ifany')
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(gender))) +
geom_line(aes(color = gender), stat = 'summary', fun.y = median)
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(gender))) +
geom_line(aes(color = gender), stat = 'summary', fun.y = median)
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = median)
ggplot(aes(x = age, y = friend_count),
data = subset(pf, !is.na(year_joined.bucket))) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean) +
geom_line(stat = "summary", fun.y = mean, linetype = 2)
with(subset(pf, tenure >= 1), summary(friend_count/tenure))
ggplot(aes(x = tenure, y = friendships_initiated/tenure), data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket))
library(gridExtra)
p1 <- ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
p2 <- ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
p3 <- ggplot(aes(x = 30 * round(tenure / 30), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
p4 <- ggplot(aes(x = 90 * round(tenure / 90), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
grid.arrange(p1, p2, p3, p4, nrow = 4)
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_smooth(aes(color = year_joined.bucket))
yo <- read.csv("yogurt.csv")
str(yo)
# change the id from an int to a factor
yo$id <- factor(yo$id)
str(yo)
ggplot(aes(x = price), data = yo) +
geom_histogram()
# very biased model
ggplot(aes(x = price), data = yo) +
geom_histogram(binwidth = 10)
summary(yo)
length(unique(yo$price))
table(yo$price)
yo <- transform(yo, all.purchases = strawberry + blueberry + pina.colada + plain + mixed.berry)
#yo$all.purchases <- yo$strawberry + yo$blueberry + yo$pina.colada + yo$plain + yo$mixed.berry
ggplot(aes(x = time, y = price), data = yo) +
geom_jitter(alpha = 1/4, shape = 21, fill = I('#F79420'))
set.seed(4230)
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x = time, y = price),
data = subset(yo, id %in% sample.ids)) +
facet_wrap( ~ id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
set.seed(10)
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x = time, y = price),
data = subset(yo, id %in% sample.ids)) +
facet_wrap( ~ id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
#install.packages('GGally')
library(GGally)
theme_set(theme_minimal(20))
# set the seed for reproducible results
set.seed(1836)
pf_subset <- pf[, c(2:15)]
names(pf_subset)
#ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000), ], axisLabels = 'internal')
nci <- read.table("nci.tsv")
colnames(nci) <- c(1:64)
library(reshape2)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
library(ggplot2)
data(diamonds) #loads the diamonds data set since it comes with the ggplot package
names(diamonds)
ggplot(aes(x = price), data = diamonds) +
geom_histogram()
ggplot(aes(x = price), data = diamonds) +
geom_histogram() +
facet_grid(~color)
ggplot(aes(x = price), data = diamonds) +
geom_histogram() +
facet_grid(~color) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = price), data = diamonds) +
geom_histogram() +
scale_y_log10() +
facet_grid(~color) +
scale_fill_brewer(type = 'qual')
names(diamonds)
ggplot(aes(x = price), data = diamonds) +
geom_histogram() +
facet_grid(~cut) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = price), data = diamonds) +
geom_histogram() +
facet_grid(~color) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = price), data = diamonds) +
geom_histogram() +
facet_grid(~color) +
scale_fill_brewer(type = 'qual', color = cut)
ggplot(aes(x = price), data = diamonds) +
geom_histogram() +
facet_grid(~color) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = log(price)), data = diamonds) +
geom_histogram() +
facet_grid(~color) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = price), data = diamonds) +
geom_histogram() +
facet_grid(~color) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = log(price), y = color), data = diamonds) +
geom_histogram() +
facet_grid(~color) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = log(price), y = color), data = diamonds) +
geom_histogram(stat = 'summary') +
facet_grid(~color) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = log(price)), data = diamonds) +
geom_histogram(aes(fill = cut)) +
facet_grid(~color) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = log(price)), data = diamonds) +
geom_histogram(aes(fill = cut)) +
facet_grid(~color) +
#scale_fill_brewer(type = 'qual')
scale_fill_brewer(palette="Spectral")
ggplot(aes(x = log(price)), data = diamonds) +
geom_histogram(aes(fill = cut)) +
facet_wrap(~color) +
#scale_fill_brewer(type = 'qual')
scale_fill_brewer(palette="Spectral")
ggplot(aes(x = log(price)), data = diamonds) +
geom_histogram(aes(fill = cut)) +
facet_wrap(~color) +
scale_fill_brewer(type = 'qual')
ggplot(aes(x = price), data = diamonds) +
geom_histogram(aes(fill = cut)) +
scale_x_log10()
ggplot(aes(x = price), data = diamonds) +
geom_histogram(aes(fill = cut)) +
scale_x_log10() +
facet_wrap(~color) +
#scale_fill_brewer(type = 'qual')
scale_fill_brewer(palette="Spectral")
names(diamonds)
ggplot(aes(x = price, y = table), data = diamonds) +
geom_point()
ggplot(aes(x = table, y = price), data = diamonds) +
geom_point() +
scale_color_brewer(type = 'qual')
ggplot(aes(x = table, y = price), data = diamonds) +
geom_point(aes(fill = cut)) +
scale_color_brewer(type = 'qual')
ggplot(aes(x = table, y = price), data = diamonds) +
geom_point(aes(fill = cut)) +
scale_fill_brewer(palette="Spectral")
ggplot(aes(x = table, y = price), data = diamonds) +
geom_point(aes(colour = cut)) +
scale_fill_brewer(palette="Spectral")
ggplot(aes(x = table, y = price), data = diamonds) +
geom_point(aes(colour = cut)) +
#scale_fill_brewer(palette="Spectral")
scale_color_brewer(type = 'qual')
summary(diamonds$table))
summary(diamonds$table)
?with
with(subset(diamonds, cut = ideal), summary())
with(subset(diamonds, cut = ideal), summary)
subset(diamonds, cut = ideal)
?subset
subset(diamonds, cut = 'ideal')
diamonds$cut
subset(diamonds, cut)
subset(diamonds, cut = 'ideal')
subset(diamonds, cut = 'Ideal')
subset(diamonds, cut == 'Ideal')
with(diamonds, summary)
with(diamonds, summary())
?with
?by
with(subset(diamonds, cut == 'Ideal', range)
d
with(subset(diamonds, cut == 'Ideal', range))
with(subset(diamonds, cut == 'Ideal'), range)
with(subset(diamonds, cut == 'Ideal')$table, range)
subset(diamonds, cut == 'Ideal')$table
summary(subset(diamonds, cut == 'Ideal')$table)
?range
range(subset(diamonds, cut == 'Ideal')$table)
with(subset(diamonds, cut == 'Ideal')$table, summary)
subset(diamonds, cut == 'Ideal')$table %>%
summary
library(dplyr)
subset(diamonds, cut == 'Ideal')$table %>%
summary
subset(diamonds, cut == 'Ideal')$table %>%
summary()
names(diamonds$cut)
summary(diamonds$cut)
subset(diamonds, cut == 'Premium')$table %>%
summary()
ggplot(aes(x = volume, y = price), data = diamonds) +
geom_point()
ggplot(aes(x = x*y*z, y = price), data = diamonds) +
geom_point()
ggplot(aes(x = x*y*z, y = price), data = diamonds) +
geom_point() +
scale_x_log10()
ggplot(aes(x = x*y*z, y = price), data = diamonds) +
geom_point() +
scale_y_log10()
ggplot(aes(x = x*y*z, y = price), data = diamonds) +
geom_point() +
scale_x_log10()
ggplot(aes(x = x*y*z, y = price), data = diamonds) +
geom_point() +
scale_x_log10() +
scale_y_log10()
ggplot(aes(x = x*y*z, y = price), data = diamonds) +
geom_point() +
scale_x_log10()
ggplot(aes(x = log(x*y*z), y = price), data = diamonds) +
geom_point()
ggplot(aes(x = log(x*y*z), y = log(price)), data = diamonds) +
geom_point()
ggplot(aes(x = x*y*z, y = log(price)), data = diamonds) +
geom_point()
?quantile
subset(diamonds, quantile(price, probs = .99))
subset(diamonds, price < quantile(price, probs = .99))
with(diamonds, x*y*z)
diamonds$volumne <- with(diamonds, x*y*z)
ggplot(aes(x = volumne, y = log(price)), data = subset(diamonds, volumne < quantile(volumne, probs = .99) ) +
geom_point()
#scale_x_log10()
ggplot(aes(x = volumne, y = log(price)), data = subset(diamonds, volumne < quantile(volumne, probs = .99))) +
ggplot(aes(x = volumne, y = log(price)), data = subset(diamonds, volumne < quantile(volumne, probs = .99))) +
geom_point()
ggplot(aes(x = volumne, y = price), data = subset(diamonds, volumne < quantile(volumne, probs = .99))) +
geom_point() +
scale_y_log10()
names(diamonds)
ggplot(aes(x = volumne, y = price), data = subset(diamonds, volumne < quantile(volumne, probs = .99))) +
geom_point(colour = clarity) +
scale_y_log10() +
scale_color_brewer(type = 'div')
ggplot(aes(x = volumne, y = price), data = subset(diamonds, volumne < quantile(volumne, probs = .99))) +
geom_point(aes(colour = clarity)) +
scale_y_log10() +
scale_color_brewer(type = 'div')
diamonds$volumne <- with(diamonds, x*y*z) %>%
ggplot(aes(x = volumne, y = price), data = subset(volumne < quantile(volumne, probs = .99))) +
geom_point(aes(colour = clarity)) +
scale_y_log10() +
scale_color_brewer(type = 'div')
diamonds$volumne <- with(diamonds, x*y*z)
ggplot(aes(x = volumne, y = price), data = subset(diamonds, volumne < quantile(volumne, probs = .99))) +
geom_point(aes(colour = clarity)) +
scale_y_log10() +
scale_color_brewer(type = 'div')
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
library(ggplot2) #must load the ggplot package first
library(dplyr)
data(diamonds) #loads the diamonds data set since it comes with the ggplot package
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
library(ggplot2) #must load the ggplot package first
library(dplyr)
data(diamonds) #loads the diamonds data set since it comes with the ggplot package
ggplot(aes(x = price), data = diamonds) +
geom_histogram(aes(fill = cut)) +
scale_x_log10() +
facet_wrap(~color) +
#scale_fill_brewer(type = 'qual')
scale_fill_brewer(palette="Spectral")
ggplot(aes(x = table, y = price), data = diamonds) +
geom_point(aes(colour = cut)) +
#scale_fill_brewer(palette="Spectral")
scale_color_brewer(type = 'qual')
subset(diamonds, cut == 'Ideal')$table %>%
summary()
subset(diamonds, cut == 'Premium')$table %>%
summary()
diamonds$volumne <- with(diamonds, x*y*z)
ggplot(aes(x = volumne, y = price), data = subset(diamonds, volumne < quantile(volumne, probs = .99))) +
geom_point(aes(colour = clarity)) +
scale_y_log10() +
scale_color_brewer(type = 'div')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
pf <- read.csv('pseudo_facebook.tsv', sep = '\t')
knitr root.dir
root.dir
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
getwd()
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
getwd()
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
list.files()
getwd()
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
list.files()
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4. Exploratory Data Analysis/eda-course-materials/lesson3/')
getwd()
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
list.files()
getwd()
getwd()
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
list.files()
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/Lessons/4.\ Exploratory\ Data\ Analysis/eda-course-materials/lesson3/')
