ggplot(aes(x = price), data = yo) +
geom_histogram()
# very biased model
ggplot(aes(x = price), data = yo) +
geom_histogram(binwidth = 10)
summary(yo)
length(unique(yo$price))
table(yo$price)
yo <- transform(yo, all.purchases = strawberry + blueberry + pina.colada + plain + mixed.berry)
#yo$all.purchases <- yo$strawberry + yo$blueberry + yo$pina.colada + yo$plain + yo$mixed.berry
ggplot(aes(x = time, y = price), data = yo) +
geom_jitter(alpha = 1/4, shape = 21, fill = I('#F79420'))
set.seed(4230)
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x = time, y = price),
data = subset(yo, id %in% sample.ids)) +
facet_wrap( ~ id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
set.seed(10)
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x = time, y = price),
data = subset(yo, id %in% sample.ids)) +
facet_wrap( ~ id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
#install.packages('GGally')
library(GGally)
theme_set(theme_minimal(20))
# set the seed for reproducible results
set.seed(1836)
pf_subset <- pf[, c(2:15)]
names(pf_subset)
#ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000), ], axisLabels = 'internal')
nci <- read.table("nci.tsv")
colnames(nci) <- c(1:64)
library(reshape2)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
ggplot(aes(x = carat, y = price), data = subset(diamonds, price < quantile(price, probs = .99) & carat < quantile(carat, probs = .99))) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21)
library(ggplot2)
ggplot(aes(x = carat, y = price), data = subset(diamonds, price < quantile(price, probs = .99) & carat < quantile(carat, probs = .99))) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21)
qplot(data = diamonds, x = carat, y = price,
xlim = c(0, quantile(diamonds$carat, 0.99)),
ylim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21)
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21)
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21, alpha = 1/4) +
stat_smooth(method = 'lm')
install.packages('GGally') # for multiple particular plot
install.packages('scales') # for a variey of things
install.packages("scales")
install.packages('memisc') # to summarize regression
install.packages('lattice') #
install.packages('MASS') # for various functions
install.packages('car') # to recode variables
install.packages('reshape2') #
install.packages('plyr') # to create interesting summaries and transmissions
install.packages("plyr")
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, #axisLabels = 'internal',
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
library(gridExtra)
plot1 <- ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 100, fill = I('#099DD9')) +
ggtitle('Price')
plot2 <- ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 0.01, fill = I('#F79420')) +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point() +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price (log10) by Carat')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 0.75, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
library(RColorBrewer)
ggplot(aes(x = carat, y = price, colour = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = FALSE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5, sdigits = 3)
install.package('bitops')
library(ggplot2)
ggplot(aes(x = carat, y = price), data = subset(diamonds, price < quantile(price, probs = .99) & carat < quantile(carat, probs = .99))) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21)
qplot(data = diamonds, x = carat, y = price,
xlim = c(0, quantile(diamonds$carat, 0.99)),
ylim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21)
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21)
ggplot(aes(x = carat, y = price), data = diamonds) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99))) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21, alpha = 1/4) +
stat_smooth(method = 'lm')
# install these if necessary
install.packages('GGally') # for multiple particular plot
install.packages('scales') # for a variey of things
install.packages('memisc') # to summarize regression
install.packages('lattice') #
install.packages("scales")
install.packages('MASS') # for various functions
install.packages('car') # to recode variables
install.packages('reshape2') #
install.packages('plyr') # to create interesting summaries and transmissions
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, #axisLabels = 'internal',
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
install.packages("plyr")
library(gridExtra)
plot1 <- ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 100, fill = I('#099DD9')) +
ggtitle('Price')
plot2 <- ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 0.01, fill = I('#F79420')) +
scale_x_log10() +
ggtitle('Price (log10)')
grid.arrange(plot1, plot2, ncol=2)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point() +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price (log10) by Carat')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/2, size = 0.75, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
# install and load the RColorBrewer package
#install.packages('RColorBrewer', dependencies = TRUE)
library(RColorBrewer)
ggplot(aes(x = carat, y = price, colour = clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = FALSE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
#mtable(m1, m2, m3, m4, m5)
mtable(m1, m2, m3, m4, m5, sdigits = 3)
?stat_smooth
install.packages('bitops')
install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
https://github.com/SolomonMg/diamonds-data/blob/master/BigDiamonds.Rda
diamondsurl = getBinaryURL("https://github.com/SolomonMg/diamonds-data/blob/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
load("BigDiamonds.rda")
names(diamondsbig)
ggplot(aes(x = carat, y = price), data = diamondsbig) +
geom_point() +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price (log10) by Carat')
m1 <- lm(logprice ~I(carat^(1/3)),
data = diamondsbig[diamondsbig$price < 10000 &
diamondsbig$cert == "GIA",])
diamondsbig$logprice <- log(diamondsbig$price)
m1 <- lm(logprice ~I(carat^(1/3)),
data = diamondsbig[diamondsbig$price < 10000 &
diamondsbig$cert == "GIA",])
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
modelEstimate
thisDiamond
?predict
dat = data.frame(m4$model, m4$residuals)
with(dat, sd(m4.residuals))
with(subset(dat, carat > .9 & carat < 1.1), sd(m4.residuals))
dat$resid <- as.numeric(dat$m4.residuals)
ggplot(aes(y = resid, x = round(carat, 2)), data = dat) +
geom_line(stat = "summary", fun.y = sd)
modelEstimate
exp(modelEstimate)
getwd()
knitr::opts_chunk$set(echo = TRUE)
setwd('~/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/HomeWork/P4_EDA/')
setwd('~/Private_Local_Data/Study/Udacity/DataAnalyst/HomeWork/P4_EDA/')
getwd()
setwd('~/Private_Local_Data/Study/Udacity/DataAnalyst/HomeWork/P4_EDA/')
library(ggplot2)
library(dplyr)
pld <- read.csv('prosperLoanData.csv')
setwd('~/Private_Local_Data/Study/Udacity/DataAnalyst/HomeWork/P4_EDA/')
getwd()
setwd('/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/HomeWork/P4_EDA/')
getwd()
setwd("/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/HomeWork/P4_EDA/")
getwd()
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/HomeWork/P4_EDA/")
pld <- read.csv('prosperLoanData.csv')
pld <- read.csv('prosperLoanData.csv')
names(pld)
dim(pld)
names(pld)
dim(pld)
str(pld)
pld$LoanStatus
setwd("/Users/pure/Private_Local_Data/Study/Udacity/DataAnalyst/HomeWork/P4_EDA/")
library(ggplot2)
library(dplyr)
pld <- read.csv('prosperLoanData.csv')
names(pld)
dim(pld)
ggplot(data=pld,aes(LoanStatus))+geom_histogram()
ggplot(data=pld,aes(LoanStatus))+geom_histogram(stat="count")
ggplot(data=pld,aes(LoanStatus))+geom_histogram(stat="count", binwidth = 10)
str(pld)
pld$LoanStatus
ggplot(data=pld,aes(LoanStatus))+stat_count()
names(pld)
pld$TotalProsperLoans
count(pld$LoanStatus)
plt %>%
group_by(LoanStatus) %>%
summarise(n=n())
pld %>%
group_by(LoanStatus) %>%
summarise(n=n())
a <- pld %>%
group_by(LoanStatus) %>%
summarise(n=n())
a
a$LoanStatus
?subset()
subset(a, LoanStatus == "Cancelled")
subset(a, LoanStatus != "Current")
subset(a, LoanStatus != c("Completed", "FinalPaymentInProgress"))
subset(a, LoanStatus != c("Completed", "FinalPaymentInProgress", "Cancelled"))
subset(a, LoanStatus != c("Completed", "FinalPaymentInProgress", "Cancelled"))
subset(a, LoanStatus != c("Completed", Cancelled"))
)
v
q
?
+
+
subset(a, LoanStatus != c("Completed", "FinalPaymentInProgress", "Cancelled"))
subset(a, LoanStatus != c("Completed", "FinalPaymentInProgress", "Cancelled"))
subset(a, LoanStatus != "Cancelled")
subset(a, LoanStatus != "Cancelled" and LoanStatus != "Completed")
subset(a, LoanStatus != "Cancelled" & LoanStatus != "Completed")
subset(a, LoanStatus != "Cancelled" & "Completed")
subset(a, LoanStatus != "Cancelled" & LoanStatus != "Completed")
sum(subset(a, LoanStatus != "Cancelled" & LoanStatus != "Completed"))
b <- subset(a, LoanStatus != "Cancelled" & LoanStatus != "Completed")
sum(b$n)
pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
sum(n)
a <- pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
sum(a$n)
a <- pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
sum(a$n)
a <- pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
a
a <- pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus != "Completed")
a
a <- pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus != "Completed") %>%
sum(n)
pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus != "Completed") %>%
sum(n)
pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus != "Completed") %>%
```
pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus != "Completed")
pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus != "Completed") %>%
sum()
a <- pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus != "Completed")
a
subset(a, n)
subset(a, n>100)
subset(a, a$n)
subset(a, select = n)
a <- pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus != "Completed", select = n)
a
a <- pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus != "Completed", select = n) %>%
sum()
a
pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus != "Completed", select = n) %>%
sum()
b <- pld %>%
group_by(LoanStatus) %>%
summarise(n=n())
b
!= "Completed" & LoanStatus != "Current",
select = n) %>%
sum()
pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus
!= "Completed" & LoanStatus != "Current",
select = n) %>%
sum()
pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus
!= "Completed" & LoanStatus != "Current")
!= "Completed" & LoanStatus != "Current",
select = n) %>%
sum()
pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus
!= "Completed" & LoanStatus != "Current",
select = n) %>%
sum()
pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus != "Completed" &
LoanStatus != "Current" & LoanStatus != "Chargedoff" &
LoanStatus != "Defaulted" & LoanStatus != "FinalPaymentInProgress",
select = n) %>%
sum()
knitr::opts_chunk$set(echo = TRUE)
ggplot(data=pld,aes(LoanStatus))+stat_count()
pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus
!= "Completed" & LoanStatus != "Current")
pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus
!= "Completed" & LoanStatus != "Current",
select = n) %>%
sum()
pld %>%
group_by(LoanStatus) %>%
summarise(n=n()) %>%
subset(LoanStatus != "Cancelled" & LoanStatus != "Completed" &
LoanStatus != "Current" & LoanStatus != "Chargedoff" &
LoanStatus != "Defaulted" & LoanStatus != "FinalPaymentInProgress",
select = n) %>%
sum()
pld %>%
group_by(LoanStatus) %>%
summarise(n=n())
pld %>%
group_by(LoanStatus) %>%
summarise(n=n())
